import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferStrategy;
import javax.swing.JFrame;
import javax.swing.JPanel;
import java.util.ArrayList;
public class GraphicBanqi2 extends Canvas 
{ 
  private final int SCREEN_WIDTH = 800;
  private final int SCREEN_HEIGHT = 600;
  
  private BufferStrategy strategy;
  
  private int round = 1;
  private int mousePressedX = -1;
  private int mousePressedY = -1;
  private int mouseClickedX = -1;
  private int mouseClickedY = -1;
  private boolean enterPressed = false;
	
  private int leftEdge = 0;
  private int topEdge = 0;
	
  private int cellHCentre = 0;
  private int cellVCentre = 0;
    
  public static void main(String[] args) throws InterruptedException 
  {
    Board chessBoard = new Board();
    GraphicBanqi2 game = new GraphicBanqi2();
    game.gameLoop(chessBoard); 
  }	
  public GraphicBanqi2() throws InterruptedException 
  {
    // create a frame to contain our game
    JFrame container = new JFrame("Banqi");
			
    // get hold the content of the frame and set up the 
    // resolution of the game
    JPanel panel = (JPanel) container.getContentPane();
    panel.setPreferredSize(new Dimension(SCREEN_WIDTH, SCREEN_HEIGHT));
    panel.setLayout(null);
				
    // setup our canvas size and put it into the content of the frame
    setBounds(0,0,SCREEN_WIDTH, SCREEN_HEIGHT);
    panel.add(this);
		
    leftEdge = SCREEN_WIDTH/8;
    topEdge = SCREEN_HEIGHT/4;
		
    cellHCentre = leftEdge/2;
    cellVCentre = topEdge/2;
		
    // Tell AWT not to bother repainting our canvas since we're
    // going to do that our self in accelerated mode
    setIgnoreRepaint(true);
				
    // finally make the window visible 
    container.pack();
    container.setResizable(false);
    container.setVisible(true);
		
    container.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        System.exit(0);
      }
    });
    addKeyListener(new KeyboardListener());
    addMouseListener(new MouseListener());
    requestFocus();
		
    // create the buffering strategy which will allow AWT
    // to manage our accelerated graphics
    createBufferStrategy(2);
    strategy = getBufferStrategy();
  }
  public void gameLoop(Board chessBoard) 
  {
    long delta = 0;
    long lastLoopTime = System.currentTimeMillis();
    while (!chessBoard.win())
    {
      
        delta = System.currentTimeMillis() - lastLoopTime;
	lastLoopTime = System.currentTimeMillis();
        Graphics2D g = (Graphics2D) strategy.getDrawGraphics();
        event(chessBoard, delta);
        display(g, chessBoard);
        update(g, delta);
      
      try { Thread.sleep(10); } catch (Exception e) {}
    }
  }
  private void event(Board chessBoard, long delta) 
  {
    if (mousePressedX >= 0 || mousePressedY >= 0) 
    {
      int xIndex = (int) Math.floor(mousePressedX / leftEdge);
      int yIndex = (int) Math.floor(mousePressedY / topEdge);		
      if (chessBoard.get(yIndex, xIndex).getType().equals("blank"))
      {
        chessBoard.flip(yIndex, xIndex);  
        round++;
      }
      else
      {
        click(chessBoard, delta, yIndex, xIndex);
      }
    }
  }
  private void click(Board chessBoard, long delta, int yIndex, int xIndex)
  {
    
      if (mouseClickedX >= 0 || mouseClickedY >= 0) 
      {
        int xIndex2 = (int) Math.floor(mouseClickedX / leftEdge);
        int yIndex2 = (int) Math.floor(mouseClickedY / topEdge);		
        if (chessBoard.get(yIndex2, xIndex2).getColor().equals(""))
        {
          chessBoard.move(yIndex, xIndex, yIndex2, xIndex2);  
          round++;
        }
        else
        {
          chessBoard.capture(yIndex, xIndex, yIndex2, xIndex2);  
          round++;
        }
      }
    
  }
  private void display(Graphics2D g, Board chessBoard) 
  {
    // Get hold of a graphics context for the accelerated 
    // surface and blank it out
    g.setColor(new Color(245, 245, 245));
    g.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);
    g.setColor(new Color(199, 199, 199));
    g.drawLine(0, topEdge, SCREEN_WIDTH, topEdge);
    g.drawLine(0, topEdge*2, SCREEN_WIDTH, topEdge*2);
    g.drawLine(0, topEdge*3, SCREEN_WIDTH, topEdge*3);
    g.drawLine(leftEdge, 0, leftEdge, SCREEN_HEIGHT);
    g.drawLine(leftEdge*2, 0, leftEdge*2, SCREEN_HEIGHT);
    g.drawLine(leftEdge*3, 0, leftEdge*3, SCREEN_HEIGHT);
    g.drawLine(leftEdge*4, 0, leftEdge*4, SCREEN_HEIGHT);
    g.drawLine(leftEdge*5, 0, leftEdge*5, SCREEN_HEIGHT);
    g.drawLine(leftEdge*6, 0, leftEdge*6, SCREEN_HEIGHT);
    g.drawLine(leftEdge*7, 0, leftEdge*7, SCREEN_HEIGHT);		
    
    g.setFont(new Font("Verdana", 0, 24));
	
    if (round % 2 == 0) 
    {
      g.setColor(new Color(245, 245, 245));
      g.fillRect(0, SCREEN_HEIGHT-44, SCREEN_WIDTH, 44);
      g.setColor(new Color(0, 0, 0));
      String output = "Player 2's turn";
      int fontWidth = g.getFontMetrics().stringWidth(output);
      g.drawString(output, SCREEN_WIDTH/2 - fontWidth/2, SCREEN_HEIGHT-10);
    }
    if (round % 2 == 1)
    {
      g.setColor(new Color(245, 245, 245));
      g.fillRect(0, SCREEN_HEIGHT-44, SCREEN_WIDTH, 44);
      g.setColor(new Color(0, 0, 0));
      String output = "Player 1's turn";
      int fontWidth = g.getFontMetrics().stringWidth(output);
      g.drawString(output, SCREEN_WIDTH/2 - fontWidth/2, SCREEN_HEIGHT-10);
    }
    if (chessBoard.win())
    {
      g.setColor(new Color(245, 245, 245));
      g.fillRect(0, SCREEN_HEIGHT-44, SCREEN_WIDTH, 44);
      g.setColor(new Color(0, 0, 0));
      String output = "Game Over";
      int fontWidth = g.getFontMetrics().stringWidth(output);
      g.drawString(output, SCREEN_WIDTH/2 - fontWidth/2, SCREEN_HEIGHT-10);
    }
    
      
    g.setFont(new Font("Verdana", 0, 20));
    for (int col = 0; col < 4; col++)
    {
      for (int row = 0; row < 8; row++) 
      {
        int xPos = row * leftEdge + cellHCentre;
        int yPos = col * topEdge + cellVCentre;
        
        if (chessBoard.get(col, row).getType().equals("blank")) 
        {
          int strWidthOffset = g.getFontMetrics().stringWidth("Blank")/2;
          g.setColor(new Color(0, 255, 0));
          g.drawString("Blank", xPos-strWidthOffset, yPos + 30);
        } 
        else
        if (chessBoard.get(col, row).getType().equals("pawn") && chessBoard.get(col, row).getColor().equals("black")) 
        {
          int strWidthOffset = g.getFontMetrics().stringWidth("Pawn")/2;
          g.setColor(new Color(0, 0, 0));
          g.drawString("Pawn", xPos-strWidthOffset, yPos + 30);
        } 
        else 
        if (chessBoard.get(col, row).getType().equals("cannon") && chessBoard.get(col, row).getColor().equals("black")) 
        {
          int strWidthOffset = g.getFontMetrics().stringWidth("Cannon")/2;
          g.setColor(new Color(0, 0, 0));
          g.drawString("Cannon", xPos-strWidthOffset, yPos + 30);
        } 
        else 
        if (chessBoard.get(col, row).getType().equals("elephant") && chessBoard.get(col, row).getColor().equals("black")) 
        {
          int strWidthOffset = g.getFontMetrics().stringWidth("Elephant")/2;
          g.setColor(new Color(0, 0, 0));
          g.drawString("Elephant", xPos-strWidthOffset, yPos + 30);
        } 
        else 
        if (chessBoard.get(col, row).getType().equals("chariot") && chessBoard.get(col, row).getColor().equals("black")) 
        {
          int strWidthOffset = g.getFontMetrics().stringWidth("Chariot")/2;
          g.setColor(new Color(0, 0, 0));
          g.drawString("Chariot", xPos-strWidthOffset, yPos + 30);
        } 
        else 
        if (chessBoard.get(col, row).getType().equals("guard") && chessBoard.get(col, row).getColor().equals("black")) 
        {
          int strWidthOffset = g.getFontMetrics().stringWidth("Guard")/2;
          g.setColor(new Color(0, 0, 0));
          g.drawString("Guard", xPos-strWidthOffset, yPos + 30);
        } 
        else
        if (chessBoard.get(col, row).getType().equals("general") && chessBoard.get(col, row).getColor().equals("black")) 
        {
          int strWidthOffset = g.getFontMetrics().stringWidth("General")/2;
          g.setColor(new Color(0, 0, 0));
          g.drawString("General", xPos-strWidthOffset, yPos + 30);
        } 
        else 
        if (chessBoard.get(col, row).getType().equals("horse") && chessBoard.get(col, row).getColor().equals("black")) 
        {
          int strWidthOffset = g.getFontMetrics().stringWidth("Horse")/2;
          g.setColor(new Color(0, 0, 0));
          g.drawString("Horse", xPos-strWidthOffset, yPos + 30);
        } 
        else
        if (chessBoard.get(col, row).getType().equals("pawn") && chessBoard.get(col, row).getColor().equals("red")) 
        {
          int strWidthOffset = g.getFontMetrics().stringWidth("Pawn")/2;
          g.setColor(new Color(255, 0, 0));
          g.drawString("Pawn", xPos-strWidthOffset, yPos + 30);
        }
        else
        if (chessBoard.get(col, row).getType().equals("horse") && chessBoard.get(col, row).getColor().equals("red")) 
        {
          int strWidthOffset = g.getFontMetrics().stringWidth("Horse") / 2;
          g.setColor(new Color(255, 0, 0));
          g.drawString("Horse", xPos-strWidthOffset, yPos + 30);
	} 
	else
	if (chessBoard.get(col, row).getType().equals("general") && chessBoard.get(col, row).getColor().equals("red")) 
	{
	  int strWidthOffset = g.getFontMetrics().stringWidth("General")/2;
	  g.setColor(new Color(255, 0, 0));
	  g.drawString("General", xPos-strWidthOffset, yPos + 30);
	}
	else
	if (chessBoard.get(col, row).getType().equals("guard") && chessBoard.get(col, row).getColor().equals("red")) 
	{
	  int strWidthOffset = g.getFontMetrics().stringWidth("Guard")/2;
	  g.setColor(new Color(255, 0, 0));
	  g.drawString("Guard", xPos-strWidthOffset, yPos + 30);
	}
	else
	if (chessBoard.get(col, row).getType().equals("chariot") && chessBoard.get(col, row).getColor().equals("red")) 
	{
	  int strWidthOffset = g.getFontMetrics().stringWidth("Chariot")/2;
	  g.setColor(new Color(255, 0, 0));
	  g.drawString("Chariot", xPos-strWidthOffset, yPos + 30);
	}
	else
	if (chessBoard.get(col, row).getType().equals("elephant") && chessBoard.get(col, row).getColor().equals("red")) 
	{
	  int strWidthOffset = g.getFontMetrics().stringWidth("Elephant")/2;
	  g.setColor(new Color(255, 0, 0));
	  g.drawString("Elephant", xPos-strWidthOffset, yPos + 30);
        } 
        else
        if (chessBoard.get(col, row).getType().equals("cannon") && chessBoard.get(col, row).getColor().equals("red")) 
        {
          int strWidthOffset = g.getFontMetrics().stringWidth("Cannon")/2;
          g.setColor(new Color(255, 0, 0));
          g.drawString("Cannon", xPos-strWidthOffset, yPos + 30);
        } 		
      } 
    }
  }	
  private void update(Graphics2D g, long delta)
  {
    // finally, we've completed drawing so clear up the graphics
    // and flip the buffer over
    g.dispose();
    strategy.show();
  }
  private class KeyboardListener implements java.awt.event.KeyListener 
  {
    @Override
    public void keyPressed(KeyEvent e) 
    {
      if (e.getKeyCode() == KeyEvent.VK_ENTER)
      enterPressed = true;
    }
    @Override
    public void keyReleased(KeyEvent e) 
    {
      if(e.getKeyCode() == KeyEvent.VK_ENTER)
      enterPressed = false;
    }
    @Override
    public void keyTyped(KeyEvent e) 
    {
      if (e.getKeyChar() == KeyEvent.VK_ESCAPE)
      System.exit(0);
    }  
  }
  private class MouseListener implements java.awt.event.MouseListener 
  {
    @Override
    public void mouseEntered(MouseEvent e) {}
    @Override
    public void mouseExited(MouseEvent e) {}
    @Override
    public void mousePressed(MouseEvent e) {
      mousePressedX = e.getX();
      mousePressedY = e.getY();
    }
    @Override
    public void mouseReleased(MouseEvent e) {
      mousePressedX = -1;
      mousePressedY = -1;
    }
    @Override
    public void mouseClicked(MouseEvent e){
       if(e.getClickCount()==2)
        {
          mouseClickedX = e.getX();
          mouseClickedY = e.getY();
        }
    }
    
  }     
}


import java.util.ArrayList;
import java.util.Scanner;
public class Banqi
{
  public static void main(String[]args)
  { 
    Board chessBoard = new Board();
    chessBoard.display();
    System.out.println("Player One's Turn");
    String player1 = firstRound(chessBoard);
    String player2 = "";
    if (player1.equals("black"))
    {
      player2 = "red";
    }
    else
    {
      player2 = "black";
    }
    for (int rep = 2; !chessBoard.win(); rep++)
    { 
      if (rep % 2 == 0)
      {
        System.out.println();
        chessBoard.display();
        System.out.println("Player Two's Turn");
        executeMove(chessBoard, player2);
      }
      else 
      {
        System.out.println();
        chessBoard.display();
        System.out.println("Player One's Turn");
        executeMove(chessBoard, player1);
      }
    }
  }
  public static String firstRound(Board chessBoard)
  {
    Scanner input = new Scanner(System.in);
    String move = input.nextLine();
    String method = "";
    String color = "";
    int pieceR = 0;
    int pieceC = 0;
    int desR = 0;
    int desC = 0;
    for (int rep = 0; rep < move.length() -1; rep++)
    {
      if (move.substring(rep, rep + 1).equals("("))
      {
        method = move.substring(0, rep);  
        if (method.equals("flip"))
        {
          pieceR = Integer.parseInt( move.substring(rep + 1, rep + 2) );
          pieceC = Integer.parseInt( move.substring(rep + 3, rep + 4) );
          chessBoard.flip(pieceR, pieceC);
          color = chessBoard.get(pieceR, pieceC).getColor();
        }
        else 
        if (method.equals("move"))
        {
          pieceR = Integer.parseInt( move.substring(rep + 1, rep + 2) );
          pieceC = Integer.parseInt( move.substring(rep + 3, rep + 4) );
          desR = Integer.parseInt( move.substring(rep + 5, rep + 6) );
          desC = Integer.parseInt( move.substring(rep + 7, rep + 8) );
          chessBoard.move(pieceR, pieceC, desR, desC);
          color = chessBoard.get(pieceR, pieceC).getColor();
        }
        else 
        if (method.equals("capture"))
        {
          pieceR = Integer.parseInt( move.substring(rep + 1, rep + 2) );
          pieceC = Integer.parseInt( move.substring(rep + 3, rep + 4) );
          desR = Integer.parseInt( move.substring(rep + 5, rep + 6) );
          desC = Integer.parseInt( move.substring(rep + 7, rep + 8) );
          chessBoard.capture(pieceR, pieceC, desR, desC);
          color = chessBoard.get(pieceR, pieceC).getColor();
        }
      }
    }
    return color;
  }
  public static void executeMove(Board chessBoard, String player)
  {
    Scanner input = new Scanner(System.in);
    String move = input.nextLine();
    String method = "";
    int pieceR = 0;
    int pieceC = 0;
    int desR = 0;
    int desC = 0;
    for (int rep = 0; rep < move.length() -1; rep++)
    {
      if (move.substring(rep, rep + 1).equals("("))
      {
        method = move.substring(0, rep);  
        if (method.equals("flip"))
        {
          pieceR = Integer.parseInt( move.substring(rep + 1, rep + 2) );
          pieceC = Integer.parseInt( move.substring(rep + 3, rep + 4) );
          if (chessBoard.get(pieceR, pieceC).getType().equals("blank"))
          {
            chessBoard.flip(pieceR, pieceC);
          }
        }
        else 
        if (method.equals("move"))
        {
          pieceR = Integer.parseInt( move.substring(rep + 1, rep + 2) );
          pieceC = Integer.parseInt( move.substring(rep + 3, rep + 4) );
          desR = Integer.parseInt( move.substring(rep + 5, rep + 6) );
          desC = Integer.parseInt( move.substring(rep + 7, rep + 8) );
          if (chessBoard.get(pieceR, pieceC).getColor().equals(player))
          {
            chessBoard.move(pieceR, pieceC, desR, desC);
          }
        }
        else 
        if (method.equals("capture"))
        {
          pieceR = Integer.parseInt( move.substring(rep + 1, rep + 2) );
          pieceC = Integer.parseInt( move.substring(rep + 3, rep + 4) );
          desR = Integer.parseInt( move.substring(rep + 5, rep + 6) );
          desC = Integer.parseInt( move.substring(rep + 7, rep + 8) );
          if (chessBoard.get(pieceR, pieceC).getColor().equals(player) && chessBoard.get(desR, desC).getColor() !=player)
          {
            chessBoard.capture(pieceR, pieceC, desR, desC);
          }
        }
      }
    }
  }
}



import java.util.ArrayList;
public class Board
{
    private Piece[][] board;
    private ArrayList<Piece> pieceList;
    public Board()
    {
      board = new Piece[4][8];
      pieceList = addPieceList();
      for (int row = 0; row < board.length; row++)
      {
        for (int col = 0; col < board[0].length; col++)
        {
          board[row][col] = new Piece();
        }
      }
    }
    public static ArrayList<Piece> addPieceList()
    {
      Piece[] pieces = {new General("black"), new General("red"), new Guard("black"), new Guard("black"), new Guard("red"), new Guard("red"), new Elephant("black"), new Elephant("black"), new Elephant("red"), new Elephant("red"),
                        new Chariot("black"), new Chariot("black"), new Chariot("red"), new Chariot("red"), new Horse("black"), new Horse("black"), new Horse("red"), new Horse("red"), new Cannon("black"), new Cannon("black"),
                        new Cannon("red"), new Cannon("red"), new Pawn("black"), new Pawn("black"), new Pawn("black"), new Pawn("black"), new Pawn("black"), new Pawn("red"), new Pawn("red"), new Pawn("red"), new Pawn("red"),
                        new Pawn("red")};
      ArrayList<Piece> list = new ArrayList<Piece>();
      for (Piece x : pieces)
      {
        list.add(x);
      }
      return list;
    }
    public Piece get(int r, int c)
    {
      return board[r][c];
    }
    public Piece randomPiece()
    {
      Piece tempPiece;
      int loc = (int) (Math.random() * pieceList.size());
      tempPiece = pieceList.get(loc);
      pieceList.remove(loc);
      return tempPiece;
    }
    public void remove(int r, int c)
    {
      board[r][c] = null;
    }
    public void addSpace(int r, int c)
    {
      board[r][c] = new Piece("","     ", -1);
    }
    public void flip(int r, int c)
    {
      if (board[r][c].getType().equals("blank"))
      {
        board[r][c] = randomPiece();
      }
    }
    public void capture(int pieceR, int pieceC, int desR, int desC)
    {
      if (board[pieceR][pieceC].canCapture(this ,pieceR, pieceC, desR, desC))
      {
        board[desR][desC] = board[pieceR][pieceC];
        remove(pieceR, pieceC);
        addSpace(pieceR, pieceC);
      }
    }
    public void move(int pieceR, int pieceC, int desR, int desC)
    {
      if (board[desR][desC].getType().equals("     "))
      {
        board[desR][desC] = board[pieceR][pieceC];   
        remove(pieceR, pieceC);
        addSpace(pieceR, pieceC);
      }
    }
    public void display()
    {
      for (Piece[] r : board)
      {
        for (Piece c : r)
        {
          System.out.print(c.toString() + "  ");
        }
        System.out.println();
        System.out.println();
      }
    }
    public boolean win()
    {
      int blank = 0;
      int red = 0;
      int black = 0; 
      for (Piece[] r : board)
      {
        for (Piece piece : r)
        {
          if (piece.getColor().equals("blank"))
          {
            blank++;
          }
          else
          if (piece.getColor().equals("red"))
          {
            red++;  
          }
          else
          if (piece.getColor().equals("black"))
          {
            black++;  
          }
        }
      }
      if ( (blank == 0 && red == 0) || (blank == 0 && black == 0))
      {
        return true;   
      }
      return false;
    }
}



/**
 * Write a description of class Banqi here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class Piece
{
    private String color;
    private String type;
    private int priority;
    public Piece()
    {
      color = "blank";
      type = "blank";
      priority = -1;
    }
    public Piece(String color, String type, int priority)
    {
      this.color = color;
      this.type = type;
      this.priority = priority;
    }
    public String getColor()
    {
      return color;
    }
    public String getType()
    {
      return type;
    }
    public int getPriority()
    {
      return priority;
    }
    public boolean canCapture(Board b, int pieceR, int pieceC, int desR, int desC)
    {
      if (getColor() != b.get(desR, desC).getColor())
      {
        if (getPriority() >= b.get(desR, desC).getPriority())
        {
          if ( (pieceR == desR && (pieceC - desC == 1 || desC - pieceC == 1)) || (pieceC == desC && (pieceR - desR == 1 || desR - pieceR == 1)) )
          {
            return true;
          }
        }
      }
      return false;
    }
    public String toString()
    {
        return "    " + getType() + "     ";
    }
}

/**
 * Write a description of class General here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class General extends Piece
{
  private int priority;
  public General(String color)
  {
    super(color, "general", 6);
  }
  public boolean canCapture(Board b, int pieceR, int pieceC, int desR, int desC)
  {
    if (this.getColor() != b.get(desR, desC).getColor())
    {
      if (b.get(desR, desC).getPriority() != 1)
      {
        return true;
      }
    } 
    return false;
  }
  public String toString()
  {
    if (getColor().equals("black"))
    {
      return getColor() + "," + getType() + " ";
    }
    else 
    {
      return " " +getColor() + "," + getType() + "  ";
    }
  }
}

/**
 * Write a description of class Guard here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class Guard extends Piece
{
  private int priority;
  public Guard(String color)
  {
    super(color, "guard", 5);
  }
  public String toString()
  {
    if (getColor().equals("black"))
    {
      return " " + getColor() + "," + getType() + "  ";
    }
    else 
    {
      return "  " + getColor() + "," + getType() + "   ";
    }
  }
}

/**
 * Write a description of class Elephnat here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class Elephant extends Piece
{
  private int priority;
  public Elephant(String color)
  {
    super(color, "elephant", 4);
  }
  public String toString()
  {
    if (getColor().equals("black"))
    {
      return getColor() + "," + getType();
    }
    else 
    {
      return " " + getColor() + "," + getType() + " ";
    }
  }
}

/**
 * Write a description of class Chariot here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class Chariot extends Piece
{
  private int priority;
  public Chariot(String color)
  {
    super(color, "chariot", 3);
  }
  public String toString()
  {
    if (getColor().equals("black"))
    {
      return getColor() + "," + getType() + " ";
    }
    else 
    {
      return " " + getColor() + "," + getType() + "  ";
    }
  }
}

/**
 * Write a description of class Horse here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class Horse extends Piece
{
  private int priority;
  public Horse(String color)
  {
    super(color, "horse", 2);
  }
  public String toString()
  {
    if (getColor().equals("black"))
    {
      return " " + getColor() + "," + getType() + "  ";
    }
    else 
    {
      return "  " + getColor() + "," + getType() + "   ";
    }
  }
}

/**
 * Write a description of class Cannon here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class Cannon extends Piece
{
  private int priority;
  public Cannon(String color)
  {
    super(color, "cannon", 0);
  }
  public boolean canCapture(Board b, int pieceR, int pieceC, int desR, int desC)
  { 
    int count = 0;
    if (getColor() != b.get(desR, desC).getColor())
    {
      if (pieceR == desR)
      {
        if (desC > pieceC)
        {
          for (int col = pieceC + 1; col < desC; col++)
          {
            if (b.get(pieceR, col).getType() != "     ")
            count++;
          }
        }
        else 
        if (desC < pieceC)
        {
          for (int col = desC + 1; col < pieceC; col++)
          {
            if (b.get(pieceR, col).getType() != "     ")
            count++;
          }
        }
      }
      else 
      if (pieceC == desC)
      {
        if (desR < pieceR)
        {
          for (int row = desR + 1; row < pieceR; row++)
          {
            if (b.get(row, pieceC).getType() != "     ")
            count++;
          }
        }
        else 
        if (desR > pieceR)
        {
          for (int row = pieceR + 1; row < desR; row++)
          {
            if (b.get(row, pieceC).getType() != "     ")
            count++;
          }
        }
      }
    }
    if (count == 1)
    {
      return true;
    }
    return false;
  }
  public String toString()
  {
    if (getColor().equals("black"))
    {
      return " " + getColor() + "," + getType() + " ";
    }
    else 
    {
      return "  " + getColor() + "," + getType() + "  ";
    }
  }
}


/**
 * Write a description of class Pawn here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class Pawn extends Piece
{
  private int priority;
  public Pawn(String color)
  {
    super(color, "pawn", 1);
  }
  public boolean canCapture(Board b, int pieceR, int pieceC, int desR, int desC)
  {
     if (getColor() != b.get(desR, desC).getColor())
     {
       if (b.get(desR, desC).getPriority() == 7 || b.get(desR, desC).getPriority() == 1)
       {
         return true;
       }
     }
     return false;
  }
  public String toString()
  {
    if (getColor().equals("black"))
    {
      return "  " + getColor() + "," + getType() + "  ";
    }
    else 
    {
      return "   " + getColor() + "," + getType() + "   ";
    }
  }
}
